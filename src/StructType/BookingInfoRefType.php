<?php

namespace Sabre\UpdateReservation\StructType;

use \WsdlToPhp\PackageBase\AbstractStructBase;

/**
 * This class stands for BookingInfoRefType StructType
 * @subpackage Structs
 */
class BookingInfoRefType extends AbstractStructBase
{
    /**
     * The BookingKey
     * Meta informations extracted from the WSDL
     * - minOccurs: 0
     * - documentation: Used for Shopping/Booking Keys
     * - minLength: 1
     * @var string
     */
    public $BookingKey;
    /**
     * The BookingRef
     * Meta informations extracted from the WSDL
     * - minOccurs: 0
     * @var \Sabre\UpdateReservation\StructType\LodgingBookingSearchRef
     */
    public $BookingRef;
    /**
     * The CancellationReason
     * Meta informations extracted from the WSDL
     * - minOccurs: 0
     * @var string
     */
    public $CancellationReason;
    /**
     * The HotelReservationIds
     * Meta informations extracted from the WSDL
     * - minOccurs: 0
     * @var \Sabre\UpdateReservation\StructType\HotelReservationIds
     */
    public $HotelReservationIds;
    /**
     * The Status
     * Meta informations extracted from the WSDL
     * - documentation: Uses STS OTA Code Table
     * - use: optional
     * @var string
     */
    public $Status;
    /**
     * The RequestorID
     * Meta informations extracted from the WSDL
     * - use: optional
     * @var string
     */
    public $RequestorID;
    /**
     * The CorpDiscount
     * Meta informations extracted from the WSDL
     * - use: optional
     * - documentation: Should only be one ID per reservation
     * - minLength: 1
     * @var string
     */
    public $CorpDiscount;
    /**
     * The PromotionalCode
     * Meta informations extracted from the WSDL
     * - use: optional
     * - documentation: Should only be one ID per reservation
     * - minLength: 1
     * @var string
     */
    public $PromotionalCode;
    /**
     * The CreationDate
     * Meta informations extracted from the WSDL
     * - use: optional
     * @var string
     */
    public $CreationDate;
    /**
     * The ExistingItinerary
     * Meta informations extracted from the WSDL
     * - use: optional
     * @var bool
     */
    public $ExistingItinerary;
    /**
     * The InfoSource
     * Meta informations extracted from the WSDL
     * - documentation: Booking source will be 3 character numeric code
     * - use: optional
     * @var string
     */
    public $InfoSource;
    /**
     * The RateKey
     * Meta informations extracted from the WSDL
     * - use: optional
     * - documentation: Used for Shopping/Booking Keys
     * - minLength: 1
     * @var string
     */
    public $RateKey;
    /**
     * The TransactionId
     * Meta informations extracted from the WSDL
     * - documentation: This is unique transaction id generated by hotels and should be provided on retries.
     * - use: optional
     * @var string
     */
    public $TransactionId;
    /**
     * The RetransmissionIndicator
     * Meta informations extracted from the WSDL
     * - use: optional
     * @var bool
     */
    public $RetransmissionIndicator;
    /**
     * The Email
     * Meta informations extracted from the WSDL
     * - use: optional
     * @var string
     */
    public $Email;
    /**
     * The FrequentFlyerNumber
     * Meta informations extracted from the WSDL
     * - use: optional
     * - documentation: Should only be one ID per reservation
     * - minLength: 1
     * @var string
     */
    public $FrequentFlyerNumber;
    /**
     * The LoyaltyId
     * Meta informations extracted from the WSDL
     * - use: optional
     * - documentation: Should only be one ID per reservation
     * - minLength: 1
     * @var string
     */
    public $LoyaltyId;
    /**
     * Constructor method for BookingInfoRefType
     * @uses BookingInfoRefType::setBookingKey()
     * @uses BookingInfoRefType::setBookingRef()
     * @uses BookingInfoRefType::setCancellationReason()
     * @uses BookingInfoRefType::setHotelReservationIds()
     * @uses BookingInfoRefType::setStatus()
     * @uses BookingInfoRefType::setRequestorID()
     * @uses BookingInfoRefType::setCorpDiscount()
     * @uses BookingInfoRefType::setPromotionalCode()
     * @uses BookingInfoRefType::setCreationDate()
     * @uses BookingInfoRefType::setExistingItinerary()
     * @uses BookingInfoRefType::setInfoSource()
     * @uses BookingInfoRefType::setRateKey()
     * @uses BookingInfoRefType::setTransactionId()
     * @uses BookingInfoRefType::setRetransmissionIndicator()
     * @uses BookingInfoRefType::setEmail()
     * @uses BookingInfoRefType::setFrequentFlyerNumber()
     * @uses BookingInfoRefType::setLoyaltyId()
     * @param string $bookingKey
     * @param \Sabre\UpdateReservation\StructType\LodgingBookingSearchRef $bookingRef
     * @param string $cancellationReason
     * @param \Sabre\UpdateReservation\StructType\HotelReservationIds $hotelReservationIds
     * @param string $status
     * @param string $requestorID
     * @param string $corpDiscount
     * @param string $promotionalCode
     * @param string $creationDate
     * @param bool $existingItinerary
     * @param string $infoSource
     * @param string $rateKey
     * @param string $transactionId
     * @param bool $retransmissionIndicator
     * @param string $email
     * @param string $frequentFlyerNumber
     * @param string $loyaltyId
     */
    public function __construct($bookingKey = null, \Sabre\UpdateReservation\StructType\LodgingBookingSearchRef $bookingRef = null, $cancellationReason = null, \Sabre\UpdateReservation\StructType\HotelReservationIds $hotelReservationIds = null, $status = null, $requestorID = null, $corpDiscount = null, $promotionalCode = null, $creationDate = null, $existingItinerary = null, $infoSource = null, $rateKey = null, $transactionId = null, $retransmissionIndicator = null, $email = null, $frequentFlyerNumber = null, $loyaltyId = null)
    {
        $this
            ->setBookingKey($bookingKey)
            ->setBookingRef($bookingRef)
            ->setCancellationReason($cancellationReason)
            ->setHotelReservationIds($hotelReservationIds)
            ->setStatus($status)
            ->setRequestorID($requestorID)
            ->setCorpDiscount($corpDiscount)
            ->setPromotionalCode($promotionalCode)
            ->setCreationDate($creationDate)
            ->setExistingItinerary($existingItinerary)
            ->setInfoSource($infoSource)
            ->setRateKey($rateKey)
            ->setTransactionId($transactionId)
            ->setRetransmissionIndicator($retransmissionIndicator)
            ->setEmail($email)
            ->setFrequentFlyerNumber($frequentFlyerNumber)
            ->setLoyaltyId($loyaltyId);
    }
    /**
     * Get BookingKey value
     * @return string|null
     */
    public function getBookingKey()
    {
        return $this->BookingKey;
    }
    /**
     * Set BookingKey value
     * @param string $bookingKey
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public function setBookingKey($bookingKey = null)
    {
        // validation for constraint: minLength
        if ((is_scalar($bookingKey) && strlen($bookingKey) < 1) || (is_array($bookingKey) && count($bookingKey) < 1)) {
            throw new \InvalidArgumentException('Invalid length, please provide an array with 1 element(s) or a scalar of 1 character(s) at least', __LINE__);
        }
        // validation for constraint: string
        if (!is_null($bookingKey) && !is_string($bookingKey)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($bookingKey)), __LINE__);
        }
        $this->BookingKey = $bookingKey;
        return $this;
    }
    /**
     * Get BookingRef value
     * @return \Sabre\UpdateReservation\StructType\LodgingBookingSearchRef|null
     */
    public function getBookingRef()
    {
        return $this->BookingRef;
    }
    /**
     * Set BookingRef value
     * @param \Sabre\UpdateReservation\StructType\LodgingBookingSearchRef $bookingRef
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public function setBookingRef(\Sabre\UpdateReservation\StructType\LodgingBookingSearchRef $bookingRef = null)
    {
        $this->BookingRef = $bookingRef;
        return $this;
    }
    /**
     * Get CancellationReason value
     * @return string|null
     */
    public function getCancellationReason()
    {
        return $this->CancellationReason;
    }
    /**
     * Set CancellationReason value
     * @param string $cancellationReason
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public function setCancellationReason($cancellationReason = null)
    {
        // validation for constraint: string
        if (!is_null($cancellationReason) && !is_string($cancellationReason)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($cancellationReason)), __LINE__);
        }
        $this->CancellationReason = $cancellationReason;
        return $this;
    }
    /**
     * Get HotelReservationIds value
     * @return \Sabre\UpdateReservation\StructType\HotelReservationIds|null
     */
    public function getHotelReservationIds()
    {
        return $this->HotelReservationIds;
    }
    /**
     * Set HotelReservationIds value
     * @param \Sabre\UpdateReservation\StructType\HotelReservationIds $hotelReservationIds
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public function setHotelReservationIds(\Sabre\UpdateReservation\StructType\HotelReservationIds $hotelReservationIds = null)
    {
        $this->HotelReservationIds = $hotelReservationIds;
        return $this;
    }
    /**
     * Get Status value
     * @return string|null
     */
    public function getStatus()
    {
        return $this->Status;
    }
    /**
     * Set Status value
     * @param string $status
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public function setStatus($status = null)
    {
        // validation for constraint: string
        if (!is_null($status) && !is_string($status)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($status)), __LINE__);
        }
        $this->Status = $status;
        return $this;
    }
    /**
     * Get RequestorID value
     * @return string|null
     */
    public function getRequestorID()
    {
        return $this->RequestorID;
    }
    /**
     * Set RequestorID value
     * @param string $requestorID
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public function setRequestorID($requestorID = null)
    {
        // validation for constraint: string
        if (!is_null($requestorID) && !is_string($requestorID)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($requestorID)), __LINE__);
        }
        $this->RequestorID = $requestorID;
        return $this;
    }
    /**
     * Get CorpDiscount value
     * @return string|null
     */
    public function getCorpDiscount()
    {
        return $this->CorpDiscount;
    }
    /**
     * Set CorpDiscount value
     * @param string $corpDiscount
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public function setCorpDiscount($corpDiscount = null)
    {
        // validation for constraint: minLength
        if ((is_scalar($corpDiscount) && strlen($corpDiscount) < 1) || (is_array($corpDiscount) && count($corpDiscount) < 1)) {
            throw new \InvalidArgumentException('Invalid length, please provide an array with 1 element(s) or a scalar of 1 character(s) at least', __LINE__);
        }
        // validation for constraint: string
        if (!is_null($corpDiscount) && !is_string($corpDiscount)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($corpDiscount)), __LINE__);
        }
        $this->CorpDiscount = $corpDiscount;
        return $this;
    }
    /**
     * Get PromotionalCode value
     * @return string|null
     */
    public function getPromotionalCode()
    {
        return $this->PromotionalCode;
    }
    /**
     * Set PromotionalCode value
     * @param string $promotionalCode
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public function setPromotionalCode($promotionalCode = null)
    {
        // validation for constraint: minLength
        if ((is_scalar($promotionalCode) && strlen($promotionalCode) < 1) || (is_array($promotionalCode) && count($promotionalCode) < 1)) {
            throw new \InvalidArgumentException('Invalid length, please provide an array with 1 element(s) or a scalar of 1 character(s) at least', __LINE__);
        }
        // validation for constraint: string
        if (!is_null($promotionalCode) && !is_string($promotionalCode)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($promotionalCode)), __LINE__);
        }
        $this->PromotionalCode = $promotionalCode;
        return $this;
    }
    /**
     * Get CreationDate value
     * @return string|null
     */
    public function getCreationDate()
    {
        return $this->CreationDate;
    }
    /**
     * Set CreationDate value
     * @param string $creationDate
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public function setCreationDate($creationDate = null)
    {
        // validation for constraint: string
        if (!is_null($creationDate) && !is_string($creationDate)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($creationDate)), __LINE__);
        }
        $this->CreationDate = $creationDate;
        return $this;
    }
    /**
     * Get ExistingItinerary value
     * @return bool|null
     */
    public function getExistingItinerary()
    {
        return $this->ExistingItinerary;
    }
    /**
     * Set ExistingItinerary value
     * @param bool $existingItinerary
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public function setExistingItinerary($existingItinerary = null)
    {
        // validation for constraint: boolean
        if (!is_null($existingItinerary) && !is_bool($existingItinerary)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a bool, "%s" given', gettype($existingItinerary)), __LINE__);
        }
        $this->ExistingItinerary = $existingItinerary;
        return $this;
    }
    /**
     * Get InfoSource value
     * @return string|null
     */
    public function getInfoSource()
    {
        return $this->InfoSource;
    }
    /**
     * Set InfoSource value
     * @param string $infoSource
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public function setInfoSource($infoSource = null)
    {
        // validation for constraint: string
        if (!is_null($infoSource) && !is_string($infoSource)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($infoSource)), __LINE__);
        }
        $this->InfoSource = $infoSource;
        return $this;
    }
    /**
     * Get RateKey value
     * @return string|null
     */
    public function getRateKey()
    {
        return $this->RateKey;
    }
    /**
     * Set RateKey value
     * @param string $rateKey
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public function setRateKey($rateKey = null)
    {
        // validation for constraint: minLength
        if ((is_scalar($rateKey) && strlen($rateKey) < 1) || (is_array($rateKey) && count($rateKey) < 1)) {
            throw new \InvalidArgumentException('Invalid length, please provide an array with 1 element(s) or a scalar of 1 character(s) at least', __LINE__);
        }
        // validation for constraint: string
        if (!is_null($rateKey) && !is_string($rateKey)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($rateKey)), __LINE__);
        }
        $this->RateKey = $rateKey;
        return $this;
    }
    /**
     * Get TransactionId value
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->TransactionId;
    }
    /**
     * Set TransactionId value
     * @param string $transactionId
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public function setTransactionId($transactionId = null)
    {
        // validation for constraint: string
        if (!is_null($transactionId) && !is_string($transactionId)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($transactionId)), __LINE__);
        }
        $this->TransactionId = $transactionId;
        return $this;
    }
    /**
     * Get RetransmissionIndicator value
     * @return bool|null
     */
    public function getRetransmissionIndicator()
    {
        return $this->RetransmissionIndicator;
    }
    /**
     * Set RetransmissionIndicator value
     * @param bool $retransmissionIndicator
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public function setRetransmissionIndicator($retransmissionIndicator = null)
    {
        // validation for constraint: boolean
        if (!is_null($retransmissionIndicator) && !is_bool($retransmissionIndicator)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a bool, "%s" given', gettype($retransmissionIndicator)), __LINE__);
        }
        $this->RetransmissionIndicator = $retransmissionIndicator;
        return $this;
    }
    /**
     * Get Email value
     * @return string|null
     */
    public function getEmail()
    {
        return $this->Email;
    }
    /**
     * Set Email value
     * @param string $email
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public function setEmail($email = null)
    {
        // validation for constraint: string
        if (!is_null($email) && !is_string($email)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($email)), __LINE__);
        }
        $this->Email = $email;
        return $this;
    }
    /**
     * Get FrequentFlyerNumber value
     * @return string|null
     */
    public function getFrequentFlyerNumber()
    {
        return $this->FrequentFlyerNumber;
    }
    /**
     * Set FrequentFlyerNumber value
     * @param string $frequentFlyerNumber
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public function setFrequentFlyerNumber($frequentFlyerNumber = null)
    {
        // validation for constraint: minLength
        if ((is_scalar($frequentFlyerNumber) && strlen($frequentFlyerNumber) < 1) || (is_array($frequentFlyerNumber) && count($frequentFlyerNumber) < 1)) {
            throw new \InvalidArgumentException('Invalid length, please provide an array with 1 element(s) or a scalar of 1 character(s) at least', __LINE__);
        }
        // validation for constraint: string
        if (!is_null($frequentFlyerNumber) && !is_string($frequentFlyerNumber)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($frequentFlyerNumber)), __LINE__);
        }
        $this->FrequentFlyerNumber = $frequentFlyerNumber;
        return $this;
    }
    /**
     * Get LoyaltyId value
     * @return string|null
     */
    public function getLoyaltyId()
    {
        return $this->LoyaltyId;
    }
    /**
     * Set LoyaltyId value
     * @param string $loyaltyId
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public function setLoyaltyId($loyaltyId = null)
    {
        // validation for constraint: minLength
        if ((is_scalar($loyaltyId) && strlen($loyaltyId) < 1) || (is_array($loyaltyId) && count($loyaltyId) < 1)) {
            throw new \InvalidArgumentException('Invalid length, please provide an array with 1 element(s) or a scalar of 1 character(s) at least', __LINE__);
        }
        // validation for constraint: string
        if (!is_null($loyaltyId) && !is_string($loyaltyId)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($loyaltyId)), __LINE__);
        }
        $this->LoyaltyId = $loyaltyId;
        return $this;
    }
    /**
     * Method called when an object has been exported with var_export() functions
     * It allows to return an object instantiated with the values
     * @see AbstractStructBase::__set_state()
     * @uses AbstractStructBase::__set_state()
     * @param array $array the exported values
     * @return \Sabre\UpdateReservation\StructType\BookingInfoRefType
     */
    public static function __set_state(array $array)
    {
        return parent::__set_state($array);
    }
    /**
     * Method returning the class name
     * @return string __CLASS__
     */
    public function __toString()
    {
        return __CLASS__;
    }
}
